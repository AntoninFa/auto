{
	"info": {
		"name": "GraphQL",
		"description": "GraphQL-Schnittstelle",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Query",
			"item": [
				{
					"name": "Suche fin, version, modellbezeichnung und eigentuemer vom Auto mit ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { auto } = body.data;\r",
									"    const { fin, version, modellbezeichnung, eigentuemer } = auto;\r",
									"    pm.expect(fin).to.be.a('string');\r",
									"    pm.expect(version).to.be.a('number').that.is.gte(0);\r",
									"    pm.expect(modellbezeichnung).to.be.a('string');\r",
									"    pm.expect(eigentuemer.eigentuemer).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($id: ID! = \"1\") {\r\n  auto(id: $id) {\r\n    fin\r\n    version\r\n    modellbezeichnung\r\n    eigentuemer {\r\n      eigentuemer\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"id\": \"1\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche fin von einem Auto mit nicht-vorhandener ID 420",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit errors', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.include('420');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('auto');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($id: ID! = \"1\") {\r\n  auto(id: $id) {\r\n    fin\r\n  }\r\n}",
								"variables": "{\r\n  \"id\": \"420\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche id, version und eigentuemer von allen Autos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { autos } = body.data;\r",
									"    pm.expect(autos).to.be.an('array').that.is.not.empty;\r",
									"    autos.forEach(auto => {\r",
									"        const { id, version, modellbezeichnung, eigentuemer } = auto;\r",
									"        pm.expect(id).to.be.a('number').that.is.gte(0);\r",
									"        pm.expect(version).to.be.a('number').that.is.gte(0);\r",
									"        pm.expect(modellbezeichnung).to.be.a('string');\r",
									"        pm.expect(eigentuemer.eigentuemer).to.be.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  autos {\r\n    id\r\n    version\r\n    modellbezeichnung\r\n    eigentuemer {\r\n      eigentuemer\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche modellbezeichnung von Autos mit Eigentuemer Anna",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit modellbezeichnung', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { autos } = body.data;\r",
									"    pm.expect(autos).to.be.an('array').that.is.not.empty;\r",
									"    autos.map(auto => auto.modellbezeichnung)\r",
									"        .forEach(modellbezeichnung => pm.expect(modellbezeichnung).to.be.a('string'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($eigentuemer: String = \"Anna\") {\r\n  autos(eigentuemer: $eigentuemer) {\r\n    modellbezeichnung\r\n  }\r\n}",
								"variables": "{\r\n  \"eigentuemer\": \"Anna\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche getriebeArt und eigentuemer von Autos mit Teilstring \"Ma\" vom Eigentuemer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit getriebeArt, eigentuemer', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { autos } = body.data;\r",
									"    pm.expect(autos).to.be.an('array').that.is.not.empty;\r",
									"    autos.forEach(auto => {\r",
									"        const { getriebeArt, eigentuemer } = auto;\r",
									"        pm.expect(getriebeArt).to.be.a('string');\r",
									"        pm.expect(eigentuemer.eigentuemer).to.be.a('string').that.includes('Ma');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($eigentuemer: String = \"a\") {\r\n  autos(eigentuemer: $eigentuemer) {\r\n    getriebeArt\r\n    eigentuemer {\r\n      eigentuemer\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"eigentuemer\": \"Ma\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche getriebeArt von Autos mit nicht-vorhandenem Eigentuemer Nichtvorhanden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit errors', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string').that.includes('Nichtvorhanden');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('autos');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($eigentuemer: String = \"Nichtvorhanden\") {\r\n  autos(eigentuemer: $eigentuemer) {\r\n    getriebeArt\r\n  }\r\n}",
								"variables": "{\r\n  \"eigentuemer\": \"Nichtvorhanden\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Queries mit der GraphQL-Schnittstelle"
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login als admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit Token', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { token } = body.data.login;\r",
									"    pm.expect(token).to.be.a('string').that.matches(/.+\\..+\\..+/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    login(username: \"admin\", password: \"p\") {\r\n        token\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login mit falschem Passwort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit Fehlermeldung', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const error = errors[0];\r",
									"    const { message, path, extensions } = error;\r",
									"    pm.expect(message).to.be.a('string').that.includes('Passwort');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('login');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    login(username: \"admin\", password: \"f\") {\r\n        token\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Login mit der GraphQL-Schnittstelle"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "graphql_url",
			"value": "{{base_url}}/graphql",
			"type": "string"
		},
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		}
	]
}